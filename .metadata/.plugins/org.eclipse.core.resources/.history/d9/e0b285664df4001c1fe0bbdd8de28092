package com.proyecto.controlador;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.proyecto.entidad.Curso;
import com.proyecto.interfaces.CursoDAO;
import com.proyecto.utils.MySQLConexion;

public class MySQLCursoDAO implements CursoDAO {

	@Override
	public int save(Curso bean) {
	 int salida= -1;
	 Connection cn=null;
	 PreparedStatement pstm=null;
	 try {
		//1
		 cn=MySQLConexion.getConection();
		 //2
		 String sql ="insert into tb_Cursos values(null,?,?,?,?)";
		 //3
		 pstm = cn.prepareStatement(sql);
		 //4
		 pstm.setString(1,bean.getNomCurso());
		 pstm.setInt(2, bean.getCreditos());
		 pstm.setInt(3,bean.getHoras());
		 pstm.setInt(4,bean.getCodCiclo());
		 
		 salida=pstm.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
	}finally {
		try {
			if(pstm!=null) pstm.close();
			if(cn!=null) cn.close();
			
		} catch (SQLException e2) {
			e2.printStackTrace();
		}
	}
	 return salida;
	}

	@Override
	public int update(Curso bean) {
		int salida=-1;
		Connection cn=null;
		PreparedStatement pstm=null;
		try {
			cn=MySQLConexion.getConection();
			String sql ="update tb_Cursos set nomCurso =?, creditos =? , horas = ? ,codCiclo=? where IdCursos = ?";
			pstm=cn.prepareStatement(sql);
			pstm.setString(1,bean.getNomCurso());
			pstm.setInt(2,bean.getCreditos());
			pstm.setInt(3,bean.getHoras());
			pstm.setInt(4, bean.getCodCiclo());
			pstm.setInt(5,bean.getCodCurso());
			salida = pstm.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return salida;
	}

	@Override
	public int deleteById(int cod) {
		int salida=-1;
		Connection cn=null;
		PreparedStatement pstm=null;
		try {
			cn=MySQLConexion.getConection();
			String sql="delete from tb_Cursos where IdCursos=?";
			pstm=cn.prepareStatement(sql);
			pstm.setInt(1,cod);
			salida=pstm.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return salida;
	}

	@Override
	public Curso findById(int cod) {
		Curso bean=null;
		Connection cn=null;
		PreparedStatement pstm=null;
		ResultSet rs=null;
		try {
			cn=MySQLConexion.getConection();
			String sql="SELECT C.IdCursos, C.nomCurso, C.creditos, C.horas,NomCiclo FROM `tb_Cursos` as C "+
			"JOIN `tb_Ciclo` as CI ON C.codCiclo = CI.codCiclo WHERE C.IdCursos =?";
			pstm = cn.prepareStatement(sql);
			pstm.setInt(1, cod);
			rs=pstm.executeQuery();
			
			if(rs.next()) {
				bean=new Curso();
				
				bean.setCodCurso(rs.getInt(1));
				bean.setNomCurso(rs.getString(2));
				bean.setCreditos(rs.getInt(3));
				bean.setHoras(rs.getInt(4));
				bean.setNomCiclo(rs.getString(5));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(rs!=null) rs.close();
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return bean;
	}

	@Override
	public ArrayList<Curso> findAll() {
		ArrayList<Curso> lista = new ArrayList<Curso>();
		Connection cn=null;
		PreparedStatement pstm= null;
		ResultSet rs=null;
		try {
			//1
			cn=MySQLConexion.getConection();
			//2
			String sql = "select * from tb_Cursos";
			//3
			pstm=cn.prepareStatement(sql);
			//4
			//5
			rs=pstm.executeQuery();
			//6
			while(rs.next()==true) {
				//7
				Curso curs = new Curso();
				//8
				curs.setCodCurso(rs.getInt(1));
				curs.setNomCurso(rs.getString(2));
				curs.setCreditos(rs.getInt(3));
				curs.setHoras(rs.getInt(4));
				//9
				lista.add(curs);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs!=null) rs.close();
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return lista;		
	}

	@Override
	public int getLastICurso() {
		 int id = 0;
	        Connection cn=null;
	        PreparedStatement pstm=null;
	        ResultSet rs = null;
	        try {
	            cn = MySQLConexion.getConection();
	            String sql = "SELECT * from tb_Cursos ORDER BY IdCursos DESC";
	            pstm = cn.prepareStatement(sql);
	            rs = pstm.executeQuery();
	            if(rs.next()) {
	                id = rs.getInt("IdCursos");
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }finally {
	            try {
	                if(pstm!=null)pstm.close();
	                if(rs!=null)rs.close();
	                if(cn!=null)cn.close();
	            } catch (SQLException e2) {
	                e2.printStackTrace();
	            }
	        }
	        return id;
	}
	
}
