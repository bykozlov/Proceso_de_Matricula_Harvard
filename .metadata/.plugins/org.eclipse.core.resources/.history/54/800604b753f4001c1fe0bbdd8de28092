package gui;

import java.awt.BorderLayout;
import java.awt.FlowLayout;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

import componente.JComboBoxBD1;
import controlador.MySqlCursoDAO;
import entidad.Curso;
import interfaces.CursoDAO;

import java.awt.Toolkit;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.awt.event.ActionEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;

public class DlgRegistrarCurso extends JDialog implements ActionListener, MouseListener {
	
	private MySqlCursoDAO cursoDAO = new MySqlCursoDAO();
	ResourceBundle rb = ResourceBundle.getBundle("SENTENCIAS_SQL");
	
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JTextField txtCodigo;
	private JTextField txtAsignatura;
	private JTextField txtHoras;
	private JTextField txtCreditos;
	private JLabel lblNewLabel_4;
	private JButton btnAdicionar;
	private JButton btnConsultar;
	private JButton btnModificar;
	private JButton btnEliminar;
	private JTable tblCurso;
	private JScrollPane scrollPane;
	private JComboBox cboCiclo;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			DlgRegistrarCurso dialog = new DlgRegistrarCurso();
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create the dialog.
	 */
	public DlgRegistrarCurso() {
		getContentPane().setBackground(new Color(255, 102, 102));
		setIconImage(Toolkit.getDefaultToolkit().getImage(DlgRegistrarCurso.class.getResource("/img/Curso.png")));
		setTitle("Registrar Curso");
		setBounds(100, 100, 692, 400);
		getContentPane().setLayout(null);
		
		lblNewLabel = new JLabel("C\u00F3digo");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblNewLabel.setBounds(10, 14, 64, 14);
		getContentPane().add(lblNewLabel);
		
		lblNewLabel_1 = new JLabel("Asignatura");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblNewLabel_1.setBounds(10, 45, 64, 14);
		getContentPane().add(lblNewLabel_1);
		
		lblNewLabel_2 = new JLabel("Horas");
		lblNewLabel_2.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblNewLabel_2.setBounds(10, 76, 64, 14);
		getContentPane().add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("Ciclo");
		lblNewLabel_3.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblNewLabel_3.setBounds(166, 14, 44, 14);
		getContentPane().add(lblNewLabel_3);
		
		txtCodigo = new JTextField();
		txtCodigo.setEditable(false);
		txtCodigo.setFont(new Font("Tahoma", Font.PLAIN, 12));
		txtCodigo.setBounds(84, 11, 72, 20);
		getContentPane().add(txtCodigo);
		txtCodigo.setColumns(10);
		
		txtAsignatura = new JTextField();
		txtAsignatura.setFont(new Font("Tahoma", Font.PLAIN, 12));
		txtAsignatura.setBounds(84, 42, 212, 20);
		getContentPane().add(txtAsignatura);
		txtAsignatura.setColumns(10);
		
		txtHoras = new JTextField();
		txtHoras.setFont(new Font("Tahoma", Font.PLAIN, 12));
		txtHoras.setBounds(84, 73, 72, 20);
		getContentPane().add(txtHoras);
		txtHoras.setColumns(10);
		
		txtCreditos = new JTextField();
		txtCreditos.setFont(new Font("Tahoma", Font.PLAIN, 12));
		txtCreditos.setBounds(220, 73, 76, 20);
		getContentPane().add(txtCreditos);
		txtCreditos.setColumns(10);
		
		lblNewLabel_4 = new JLabel("Cr\u00E9ditos");
		lblNewLabel_4.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblNewLabel_4.setBounds(166, 76, 44, 14);
		getContentPane().add(lblNewLabel_4);
		
		btnAdicionar = new JButton("Adicionar");
		btnAdicionar.addActionListener(this);
		btnAdicionar.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnAdicionar.setBounds(520, 5, 146, 23);
		getContentPane().add(btnAdicionar);
		
		btnConsultar = new JButton("Consultar");
		btnConsultar.addActionListener(this);
		btnConsultar.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnConsultar.setBounds(520, 36, 146, 23);
		getContentPane().add(btnConsultar);
		
		btnModificar = new JButton("Modificar");
		btnModificar.addActionListener(this);
		btnModificar.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnModificar.setBounds(520, 67, 146, 23);
		getContentPane().add(btnModificar);
		
		btnEliminar = new JButton("Eliminar");
		btnEliminar.addActionListener(this);
		btnEliminar.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnEliminar.setBounds(520, 97, 146, 23);
		getContentPane().add(btnEliminar);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 131, 656, 219);
		getContentPane().add(scrollPane);
		
		tblCurso = new JTable();
		tblCurso.addMouseListener(this);
		tblCurso.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"C\u00D3DIGO DE CURSO", "ASIGNATURA", "CICLO", "CR\u00C9DITOS", "HORAS"
			}
		));
		scrollPane.setViewportView(tblCurso);
		
		cboCiclo = new JComboBoxBD1(rb.getString("sql_ciclo"));
		cboCiclo.setFont(new Font("Tahoma", Font.PLAIN, 12));
		cboCiclo.setBounds(220, 10, 76, 22);
		getContentPane().add(cboCiclo);
		cantidadCursos();
		listado();
	}
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnEliminar) {
			actionPerformedBtnEliminar(e);
		}
		if (e.getSource() == btnModificar) {
			actionPerformedBtnModificar(e);
		}
		if (e.getSource() == btnConsultar) {
			actionPerformedBtnConsultar(e);
		}
		if (e.getSource() == btnAdicionar) {
			actionPerformedBtnAdicionar(e);
		}
	}
	protected void actionPerformedBtnAdicionar(ActionEvent e) {
		int ciclo;
		String asignatura, credi, horas;
		ciclo = cboCiclo.getSelectedIndex()+1;
		asignatura = txtAsignatura.getText();
		credi = txtCreditos.getText();
		horas = txtHoras.getText();
		if(asignatura.trim().equals("")) {
			mensaje("Campo Asignatura es obligatorio");
			txtAsignatura.requestFocus();
		}
		else if(asignatura.matches("[a-z A-Z\\\\ñ\\\\Ñ\\\\s\\\\á\\\\é\\\\í\\\\ó\\\\ú\\\\Á\\\\É\\\\Í\\\\Ó\\\\Ú]{3,50}")==false) {
			mensaje("Campo Asignatura MIN: 3 - MAX:50 carácteres");
			txtAsignatura.requestFocus();
		}
		
		else if(credi.trim().equals("")){
			mensaje("Campo creditos es obligatorio");
			txtCreditos.requestFocus();
		}
		else if(credi.matches("\\d{1}")==false){
			mensaje("Capo creditos debe debe tener 1 digito");
			txtCreditos.requestFocus();
		 }
		
		else if(horas.trim().equals("")){
			mensaje("Campo horas es obligatorio");
			txtHoras.requestFocus();
		}
		else if(horas.matches("\\d{1}")==false){
			mensaje("Capo horas debe debe tener 1 digito");
			txtHoras.requestFocus();
		 
		} else {
			Curso crso = new Curso();
			crso.setAsignatura(asignatura);
			crso.setCiclo(ciclo);
			crso.setCredi(Integer.parseInt(credi));
			crso.setHoras(Integer.parseInt(horas));
			int resultado;
			resultado = cursoDAO.save(crso);
			if (resultado == 1)
				mensaje("Curso Registrado");
			else
				mensaje("Error en el registro");
		}
		listado();
	}
	protected void actionPerformedBtnConsultar(ActionEvent e) {
		
	}
	
	void mensaje(String m) {
		JOptionPane.showMessageDialog(null, m);
	}
	
	void listado() {
		DefaultTableModel model = (DefaultTableModel) tblCurso.getModel();
		model.setRowCount(0);
		ArrayList<Curso> data = cursoDAO.findAll();
		for(Curso curso:data) {
			Object row[] = {curso.getCod(), curso.getNom_ciclo(),curso.getAsignatura(), curso.getCredi()
					, curso.getHoras()};
			model.addRow(row);
		}
	}
	
	protected void actionPerformedBtnModificar(ActionEvent e) {
		int ciclo;
		String codigo, asignatura, credi, horas;
		codigo = txtCodigo.getText();
		asignatura = txtAsignatura.getText();
		ciclo = cboCiclo.getSelectedIndex()+1;
		credi = txtCreditos.getText();
		horas = txtHoras.getText();
		if (asignatura.trim().equals("")) {
			mensaje("Campo Asignatura es obligatorio");
					txtAsignatura.requestFocus();
		} else if (asignatura.matches(".{5,50}") == false) {
			mensaje("Campo Asignatura MIN: 5 - MAX: 50 caracteres");
			txtAsignatura.requestFocus();
		} else if (credi.trim().equals("")) {
			mensaje("Campo Creditos es obligatorio");
			txtCreditos.requestFocus();
		} else if (credi.matches(
				"[1-4]\\d") == false) {
			mensaje("Campo Credito MIN:5 - Max: 20");
		} else if (horas.trim().equals("")) {
			mensaje("Campo Horas es obligatorio");
			txtHoras.requestFocus();
		} else if (horas.matches("[1-5]\\d||[6][0]") == false) {
			mensaje("Horas MIN:30 - MAX: 60");
			txtHoras.requestFocus();
		} else {
			Curso crso = new Curso();
			crso.setCod(Integer.parseInt(codigo));
			crso.setAsignatura(asignatura);
			crso.setCiclo(ciclo);
			crso.setCredi(Integer.parseInt(credi));
			crso.setHoras(Integer.parseInt(horas));
			int resultado;
			resultado = cursoDAO.save(crso);
			if (resultado == 1)
				mensaje("Curso Registrado");
			else
				mensaje("Error en el registro");
		}
		listado();
	}
	protected void actionPerformedBtnEliminar(ActionEvent e) {
		int cod, boton;
		boton = JOptionPane.showConfirmDialog(null, "Seguro de eliminar?", "Sistema", JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		if (boton == 0) {
			cod = Integer.parseInt(txtCodigo.getText());
			int salida;
			salida = cursoDAO.deleteById(cod);
			if (salida == 1)
				mensaje("Curso Eliminado");
			else
				mensaje("Error en la EliminaciÃ³n");
		}
	}
	//metodo pa ver el codigo
	private void cantidadCursos() {
        int id = cursoDAO.getLastICurso();
        id++;
        txtCodigo.setText("" + id);
    }
	//validacion de numeros y letras
	boolean Bloquear_Letras(KeyEvent arg0) {
		char letra = arg0.getKeyChar(); // Obtiene el caracter ingresado
		if (Character.isLetter(letra)) {// Si el caracter tiene números
			getToolkit().beep(); // Emite un sonido
			arg0.consume(); // No se realiza esos datos
			mensaje1("Ingrese solo números", "Sistema", 1); // Mensaje
			return true;
		}else{
			return false;
		}
	}
	
	void Bloquear_Numeros(KeyEvent arg0) {
		char num = arg0.getKeyChar(); // Obtiene el caracter ingresado
		if (Character.isDigit(num)) {// Si el caracter tiene numeros
			getToolkit().beep(); // Emite un sonido
			arg0.consume(); // No se realiza esos datos
			mensaje1("Ingrese solo letras", "Sistema", 1); // Mensaje
		}
	}
	
	void mensaje1(String mensaje, String titulo, int tipoMensaje){
		JOptionPane.showMessageDialog(null, mensaje, titulo, tipoMensaje);
	}
	void mostrarDatos() {
		int posFila;
		String cod;
		posFila = tblCurso.getSelectedRow();
		
		cod = tblCurso.getValueAt(posFila, 0).toString();
		
		Curso bean = cursoDAO.findById(Integer.parseInt(cod));
		
		txtCodigo.setText(cod);
		txtAsignatura.setText(bean.getAsignatura()+"");
		txtCreditos.setText(bean.getCredi() +"");
		txtHoras.setText(bean.getHoras()+"");
		cboCiclo.setSelectedItem(bean.getNom_ciclo()+"");
	}
	
	public void mouseClicked(MouseEvent e) {
		if (e.getSource() == tblCurso) {
			mouseClickedTblCurso(e);
		}
	}
	public void mouseEntered(MouseEvent e) {
	}
	public void mouseExited(MouseEvent e) {
	}
	public void mousePressed(MouseEvent e) {
	}
	public void mouseReleased(MouseEvent e) {
	}
	protected void mouseClickedTblCurso(MouseEvent e) {
		mostrarDatos();
	}
}
